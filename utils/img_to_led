#!/usr/bin/python3

import argparse
import numpy as np
import os
import shlex
import subprocess
import sys

# This is necessary for the import below to work
root_dir = os.path.abspath(os.path.dirname(__file__) + '/..')
sys.path.append(root_dir)

from pifi.config import Config
from pifi.video.videoprocessor import VideoProcessor

def parseArgs():
    parser = argparse.ArgumentParser(description='convert an image to an RGB frame for display on the LEDs')
    parser.add_argument('--image', dest='image_path', action='store',
        help='path to the image to convert')
    parser.add_argument('--display-width', dest='display_width', action='store', type=int, default=None, metavar='N',
        help='Number of pixels / units')
    parser.add_argument('--display-height', dest='display_height', action='store', type=int, default=None, metavar='N',
        help='Number of pixels / units')
    parser.add_argument('--output-file', dest='output_file', action='store',
        help="output path to save the array. The suffix '_<color-mode>.npy' will be appended to this file name.")
    parser.add_argument('--color-mode', dest='color_mode', action='store', default='color',
        help="Either 'color' or 'monochrome'. Defaults to 'color'.")

    args = parser.parse_args()
    return args


args = parseArgs()
Config.load_config_if_not_loaded()

reshape_dimensions = None
pix_fmt = None
display_width = args.display_width
display_height = args.display_height
if display_width is None:
    display_width = Config.get_or_throw('leds.display_width')
if display_height is None:
    display_height = Config.get_or_throw('leds.display_height')

if args.color_mode == 'color':
    reshape_dimensions = [display_height, display_width, 3]
    pix_fmt = 'rgb24'
elif args.color_mode == 'monochrome':
    reshape_dimensions = [display_height, display_width]
    pix_fmt = 'gray'
else:
    raise Exception(f'Invalid color mode: {args.color_mode}.')

ffmpeg_cmd = (f'{VideoProcessor.get_standard_ffmpeg_cmd()} -i {shlex.quote(str(args.image_path))} -filter:v ' +
    f'scale={shlex.quote(str(display_width))}x{shlex.quote(str(display_height))} -c:a copy -f rawvideo ' +
    f'-pix_fmt {shlex.quote(str(pix_fmt))} pipe:1')
data = subprocess.check_output(ffmpeg_cmd, shell = True, executable = '/usr/bin/bash')
arr = np.frombuffer(data, np.uint8).reshape(reshape_dimensions)
np.save(args.output_file + '_{}'.format(args.color_mode), arr)
