#!/usr/bin/python3
from http.server import ThreadingHTTPServer, BaseHTTPRequestHandler, HTTPStatus
from io import BytesIO
import json
import ssl
import traceback
import urllib
import time
from pifi.playlist import Playlist
from pifi.logger import Logger
from pifi.config import Config
from pifi.directoryutils import DirectoryUtils
from pifi.volumecontroller import VolumeController
from pifi.games.scores import Scores
from pifi.games.snake import Snake
from pifi.games.unixsockethelper import UnixSocketHelper
from pifi.settings.settingsdb import SettingsDb
from pifi.database import Database

class PifiAPI():
    __playlist = None
    __vol_controller = None
    __settings_db = None
    __logger = None

    def __init__(self):
        self.__playlist = Playlist()
        self.__vol_controller = VolumeController()
        self.__settings_db = SettingsDb()
        self.__logger = Logger().set_namespace(self.__class__.__name__)

    # get all the data that we poll for every second in the pifi
    def get_queue(self):
        response_details = {}
        queue = self.__playlist.get_queue()
        response_details['queue'] = queue
        response_details['vol_pct'] = self.__vol_controller.get_vol_pct()
        response_details[SettingsDb.SCREENSAVER_SETTING] = self.__settings_db.is_enabled(SettingsDb.SCREENSAVER_SETTING, True)
        response_details['success'] = True
        return response_details

    # get all the data that we poll for every second in snake
    def get_snake_data(self):
        is_game_joinable = False
        game_joinable_countdown_s = None
        current_video = self.__playlist.get_current_video()
        if current_video and current_video['title'] == Snake.GAME_TITLE and current_video['color_mode'] == Playlist.STATUS2_WAITING_FOR_PLAYERS:
            is_game_joinable = True
            current_video_create_date = Database.database_date_to_unix_time(current_video['create_date'])
            game_joinable_countdown_s = max(
                round(UnixSocketHelper.MAX_MULTI_PLAYER_JOIN_TIME_S - (time.time() - current_video_create_date), 0),
                0
            )

        return {
            'is_game_joinable': is_game_joinable,
            'game_joinable_countdown_s': game_joinable_countdown_s,
            'vol_pct': self.__vol_controller.get_vol_pct(),
            'success': True
        }

    def get_volume(self):
        response_details = {}
        response_details['vol_pct'] = self.__vol_controller.get_vol_pct()
        response_details['success'] = True
        return response_details

    def enqueue(self, post_data):
        self.__playlist.enqueue(
            post_data['url'], post_data['color_mode'], post_data['thumbnail'], post_data['title'], post_data['duration'], Playlist.TYPE_VIDEO, ''
        )
        response_details = post_data
        response_details['success'] = True
        return response_details

    def enqueue_or_join_game(self, post_data):
        title = post_data['title']
        game_playlist_video_id = None
        did_join_existing_game = None
        num_players = None
        apple_count = None

        current_video = self.__playlist.get_current_video()
        if current_video and current_video['title'] == title and current_video['color_mode'] == Playlist.STATUS2_WAITING_FOR_PLAYERS:
            # join game
            game_playlist_video_id = current_video['playlist_video_id']
            did_join_existing_game = True
            try:
                settings = json.loads(current_video['settings'])
                num_players = settings['num_players']
                apple_count = settings['apple_count']
            except Exception:
                self.__logger.error("Couldn't load settings from database: {}".format(current_video['settings']))
        else:
            # enqueue game
            game_type = Playlist.TYPE_GAME
            url = None
            thumbnail = '/assets/snake/snake-thumbnail.png'
            num_players = int(post_data['num_players'])
            apple_count = int(post_data['apple_count'])
            settings = json.dumps({
                'difficulty': int(post_data['difficulty']),
                'num_players': num_players,
                'apple_count': apple_count,
            })
            duration = 'n/a'

            # TODO HACK: using color_mode to store the status2 sub-status until we figure out if this is the best schema design
            color_mode = Playlist.STATUS2_PLAYING
            if num_players > 1:
                color_mode = Playlist.STATUS2_WAITING_FOR_PLAYERS
            game_playlist_video_id = self.__playlist.enqueue(
                url, color_mode, thumbnail, title, duration, game_type, settings
            )
            did_join_existing_game = False

            # skip videos in the queue until we get to the game
            while True:
                current_video = self.__playlist.get_current_video()
                if current_video is None:
                    break
                if current_video['playlist_video_id'] < game_playlist_video_id:
                    self.__playlist.skip(current_video['playlist_video_id'])
                else:
                    break

        return {
            'success': True,
            'playlist_video_id': game_playlist_video_id,
            'did_join_existing_game': did_join_existing_game,
            'num_players': num_players,
            'apple_count': apple_count
        }

    def submit_game_score_initials(self, post_data):
        if len(post_data['initials']) != 3:
            return {'success': False}
        score_id = int(post_data['score_id'])
        initials = post_data['initials'].upper()
        scores = Scores()
        success = scores.update_initials(score_id, initials)
        return {'success': success}

    def get_high_scores(self, get_data):
        game_type = get_data['game_type']
        scores = Scores()
        high_scores = scores.get_high_scores(game_type)
        return {
            'success': True,
            'high_scores': high_scores,
        }

    def skip(self, post_data):
        success = self.__playlist.skip(post_data['playlist_video_id'])
        return {'success': success}

    def remove(self, post_data):
        success = self.__playlist.remove(post_data['playlist_video_id'])
        return {'success': success}

    def clear(self):
        self.__playlist.clear()
        return {'success': True}

    def set_screensaver_enabled(self, post_data):
        self.__settings_db.set(SettingsDb.SCREENSAVER_SETTING, bool(post_data[SettingsDb.SCREENSAVER_SETTING]))
        return {'success': True}

    # TODO : race conditions when setting volume, bigger surface area after converting to ThreadingHTTPServer.
    # Options:
    # 1) increase time interval to send ajax volume requests to reduce likelihood of race condition
    # 2) lock sending ajax volume requests until any in-flight requests return their response
    #
    # Also, investigate whatever client side locking I did here...?
    def set_vol_pct(self, post_data):
        vol_pct = int(post_data['vol_pct'])
        self.__vol_controller.set_vol_pct(vol_pct)
        return {
            'vol_pct': vol_pct,
            'success': True
        }

class PifiServerRequestHandler(BaseHTTPRequestHandler):

    __root_dir = None
    __api = None
    __logger = None

    def __init__(self, request, client_address, server):
        self.__root_dir = DirectoryUtils().root_dir + "/app/build"
        self.__api = PifiAPI()
        self.__logger = Logger().set_namespace(self.__class__.__name__)
        BaseHTTPRequestHandler.__init__(self, request, client_address, server)

    def do_OPTIONS(self):
        self.send_response(200, "ok")
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header("Access-Control-Allow-Headers", "X-Requested-With")
        self.send_header("Access-Control-Allow-Headers", "Content-Type")
        self.end_headers()

    def do_GET(self):
        try:
            if self.path[:4] == "/api":
                return self.__do_api_GET(self.path[5:])

            return self.__serve_static_asset()
        except Exception as e:
            self.log_error('Exception: {}'.format(traceback.format_exc()))

    def do_POST(self):
        try:
            if self.path[:4] == "/api":
                return self.__do_api_POST(self.path[5:])
            return self.__serve_static_asset()
        except Exception as e:
            self.log_error('Exception: {}'.format(traceback.format_exc()))

    def __do_404(self):
        self.send_response(404)
        self.end_headers()

    def __do_api_GET(self, path):
        parsed_path = urllib.parse.urlparse(path)
        get_data = urllib.parse.unquote(parsed_path.query)
        if get_data:
            get_data = json.loads(get_data)

        if parsed_path.path == 'queue':
            response = self.__api.get_queue()
        elif parsed_path.path == 'vol_pct':
            response = self.__api.get_volume()
        elif parsed_path.path == 'high_scores':
            response = self.__api.get_high_scores(get_data)
        elif parsed_path.path == 'snake':
            response = self.__api.get_snake_data()
        else:
            self.__do_404()
            return

        self.send_response(200)
        self.send_header("Access-Control-Allow-Origin", "*")
        self.send_header("Content-Type", "application/json")
        self.end_headers()
        resp = BytesIO()
        resp.write(bytes(json.dumps(response), 'utf-8'))
        self.wfile.write(resp.getvalue())

    def __do_api_POST(self, path):
        content_length = int(self.headers['Content-Length'])

        post_data = None
        if content_length > 0:
            body = self.rfile.read(content_length)
            post_data = json.loads(body.decode("utf-8"))

        if path == 'queue':
            response = self.__api.enqueue(post_data)
        elif path == 'skip':
            response = self.__api.skip(post_data)
        elif path == 'remove':
            response = self.__api.remove(post_data)
        elif path == 'clear':
            response = self.__api.clear()
        elif path == 'screensaver':
            response = self.__api.set_screensaver_enabled(post_data)
        elif path == 'vol_pct':
            response = self.__api.set_vol_pct(post_data)
        elif path == 'enqueue_or_join_game':
            response = self.__api.enqueue_or_join_game(post_data)
        elif path == 'submit_game_score_initials':
            response = self.__api.submit_game_score_initials(post_data)
        else:
            self.__do_404()
            return

        self.send_response(200)
        self.send_header("Access-Control-Allow-Origin", "*")
        self.send_header("Content-Type", "application/json")
        self.end_headers()
        resp = BytesIO()
        resp.write(bytes(json.dumps(response), 'utf-8'))
        self.wfile.write(resp.getvalue())

    def __serve_static_asset(self):
        if self.path == '/':
            self.path = '/index.html'

        if self.path == '/snake' or self.path == '/snake/':
            self.path = DirectoryUtils().root_dir + '/assets/snake/snake.html'
        elif self.path.startswith('/assets/'):
            self.path = DirectoryUtils().root_dir + '/assets/' + self.path[len('/assets/'):]
        else:
            self.path = self.__root_dir + self.path

        try:
            file_to_open = open(self.path, 'rb').read()
            self.send_response(200)
        except Exception as e:
            self.__logger.error(str(e))
            self.log_error('Exception: {}'.format(traceback.format_exc()))
            file_to_open = "File not found"
            self.__do_404()
            return

        if self.path.endswith('.js'):
            self.send_header("Content-Type", "text/javascript")
        elif self.path.endswith('.css'):
            self.send_header("Content-Type", "text/css")
        elif self.path.endswith('.svg') or self.path.endswith('.svgz'):
            self.send_header("Content-Type", "image/svg+xml")
        self.end_headers()

        if type(file_to_open) is bytes:
            self.wfile.write(file_to_open)
        else:
            self.wfile.write(bytes(file_to_open, 'utf-8'))
        return

    def log_request(self, code='-', size='-'):
        if isinstance(code, HTTPStatus):
            code = code.value
        self.log_message('[REQUEST] "%s" %s %s', self.requestline, str(code), str(size))

    def log_error(self, format, *args):
        self.__logger.error("%s - - %s" % (self.client_address[0], format%args))

    def log_message(self, format, *args):
        self.__logger.info("%s - - %s" % (self.client_address[0], format%args))


class PifiServer:

    __secure = False
    __server = None
    __config = Config()

    def __init__(self):
        self.__secure = self.__config.get_server_config('use_ssl', False)

        if not self.__secure:
            self.__server = ThreadingHTTPServer(('0.0.0.0', 80), PifiServerRequestHandler)
        else:
            self.__server = ThreadingHTTPServer(('0.0.0.0', 443), PifiServerRequestHandler)
            self.__server.socket = ssl.wrap_socket(self.__server.socket,
                                                   keyfile=self.__config.get_server_config('keyfile', ""),
                                                   certfile=self.__config.get_server_config('certfile', ""),
                                                   server_side=True)

    def serve_forever(self):
        self.__server.serve_forever()

server = PifiServer()
server.serve_forever()
