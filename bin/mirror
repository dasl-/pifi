#!/usr/bin/env python3

import os
import sys

# This is necessary for the imports below to work
root_dir = os.path.abspath(os.path.dirname(__file__) + '/..')
sys.path.append(root_dir)

import argparse
from pifi.settings.videosettings import VideoSettings
from pifi.videoplayer import VideoPlayer
from pifi.videoprocessor import VideoProcessor

import time
import datetime
from picamera.array import PiRGBArray
from picamera import PiCamera

def parseArgs():
    parser = argparse.ArgumentParser(description='convert a video.')
    parser.add_argument('--url', dest='url', action='store', default='https://www.youtube.com/watch?v=xmUZ6nCFNoU',
        help='youtube video url. default: The Smashing Pumpkins - Today.')
    parser.add_argument('--display-width', dest='display_width', action='store', type=int, default=28, metavar='N',
        help='Number of pixels / units')
    parser.add_argument('--display-height', dest='display_height', action='store', type=int, default=18, metavar='N',
        help='Number of pixels / units')
    parser.add_argument('--color', dest='is_color', action='store_true', default=False,
        help='color output? (default is black and white)')
    parser.add_argument('--flip-x', dest='flip_x', action='store_true', default=False,
        help='flip X direction output')
    parser.add_argument('--flip-y', dest='flip_y', action='store_true', default=False,
        help='flip Y direction output')
    parser.add_argument('--brightness', dest='brightness', action='store', type=int, default=3, metavar='N',
        help='Global brightness value. Max of 31.')

    args = parser.parse_args()
    return args


args = parseArgs()
video_settings = VideoSettings(args)

video_player = VideoPlayer(video_settings)
video_player.clear_screen()

# TODO: update this code. It won't work with VideoProcessor API changes we've made.
video_processor = VideoProcessor(video_settings)

# Video Capture - 80, 60 is as small as itll go without artifacts or breaking
camera = PiCamera()
camera.resolution = (80, 60)
camera.vflip = True

rawCapture = PiRGBArray(camera, size=(80, 60))
time.sleep(0.1)

for frame in camera.capture_continuous(rawCapture, format="bgr", use_video_port=True):
    image = frame.array
    video_processor.display_image(image, video_player)
    rawCapture.truncate(0)
    print(datetime.datetime.now())
