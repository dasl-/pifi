#!/usr/bin/env python3

import argparse
import os
import sys
import traceback

# This is necessary for the imports below to work
root_dir = os.path.abspath(os.path.dirname(__file__) + '/..')
sys.path.append(root_dir)

from pifi.configloader import ConfigLoader
from pifi.logger import Logger
from pifi.games.gamecolorhelper import GameColorHelper
from pifi.games.snake import Snake
from pifi.playlist import Playlist
from pifi.settings.snakesettings import SnakeSettings

def parseArgs():
    parser = argparse.ArgumentParser(
        description=("Play snake. This can't be run as a standalone executable, as it requires coordination " +
            "with the web browser for user input."),
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument('--playlist-video-id', dest='playlist_video_id', action='store', type=int,
        metavar='N', required=True, help='The playlist_video_id of the snake game in the database')
    parser.add_argument('--server-unix-socket-fd', dest='server_unix_socket_fd', action='store', type=int,
        metavar='N', required=True, help="The file descriptor number (integer) of the game's server unix socket.")
    parser.add_argument('--log-uuid', dest='log_uuid', action='store', help='Logger UUID')
    parser.add_argument('--display-width', dest='display_width', action='store', type=int,
        metavar='N', help='Number of pixels / units')
    parser.add_argument('--display-height', dest='display_height', action='store', type=int,
        metavar='N', help='Number of pixels / units')
    parser.add_argument('--game-color-mode', dest='game_color_mode', action='store',
        help=(GameColorHelper().get_help_string()))
    parser.add_argument('--flip-x', dest='flip_x', action='store_true',
        default=None, help='flip X direction output')
    parser.add_argument('--flip-y', dest='flip_y', action='store_true',
        default=None, help='flip Y direction output')
    parser.add_argument('--brightness', dest='brightness', action='store', type=int,
        metavar='N', help='Global brightness value. Max of 31.')

    args = parser.parse_args()
    return args


args = parseArgs()
if args.log_uuid:
    Logger.set_uuid(args.log_uuid)
else:
    Logger.set_uuid(Logger.make_uuid())
logger = Logger().set_namespace(os.path.basename(__file__))
ConfigLoader() # load config, e.g. set log level.

snake_playlist_item = Playlist().get_playlist_item_by_id(args.playlist_video_id)
try:
    settings = SnakeSettings.from_playlist_item_in_queue(snake_playlist_item)
except Exception:
    logger.error(f'Caught exception: {traceback.format_exc()}')

if args.display_width is not None:
    settings.display_width = args.display_width
if args.display_height is not None:
    settings.display_height = args.display_height
if args.brightness is not None:
    settings.brightness = args.brightness
if args.flip_x is not None:
    settings.flip_x = args.flip_x
if args.flip_y is not None:
    settings.flip_y = args.flip_y
if args.game_color_mode is not None:
    GameColorHelper().set_game_color_mode(settings, args.game_color_mode)

try:
    Snake(settings, args.server_unix_socket_fd, snake_playlist_item).play_snake()
except Exception:
    logger.error(f'Caught exception: {traceback.format_exc()}')
