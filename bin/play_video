#!/usr/bin/env python3

import os
import sys

# This is necessary for the imports below to work
root_dir = os.path.abspath(os.path.dirname(__file__) + '/..')
sys.path.append(root_dir)

import argparse
from pifi.logger import Logger
from pifi.settings.videosettings import VideoSettings
from pifi.videoplayer import VideoPlayer
from pifi.videoprocessor import VideoProcessor

def parseArgs():
    parser = argparse.ArgumentParser(
        description=("Play a video. Arguments that are not specified will get values from your " +
            "config file, if you have one."),
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument('--url', dest='url', action='store', default='https://www.youtube.com/watch?v=xmUZ6nCFNoU',
        help='youtube video url. default: The Smashing Pumpkins - Today.')
    parser.add_argument('--log-uuid', dest='log_uuid', action='store', help='Logger UUID')
    parser.add_argument('--display-width', dest='display_width', action='store', type=int,
        metavar='N', help='Number of pixels / units')
    parser.add_argument('--display-height', dest='display_height', action='store', type=int,
        metavar='N', help='Number of pixels / units')
    parser.add_argument('--color-mode', dest='color_mode', action='store',
        help=("one of: '{}', '{}', '{}', '{}', '{}', '{}', or '{}'."
            .format(VideoSettings.COLOR_MODE_COLOR, VideoSettings.COLOR_MODE_BW, VideoSettings.COLOR_MODE_R,
                VideoSettings.COLOR_MODE_G, VideoSettings.COLOR_MODE_B, VideoSettings.COLOR_MODE_INVERT_COLOR,
                VideoSettings.COLOR_MODE_INVERT_BW))
    )
    parser.add_argument('--no-audio', dest='dont_play_audio', action='store_true',
        default=False, help="don't play the audio")
    parser.add_argument('--flip-x', dest='flip_x', action='store_true',
        help='flip X direction output')
    parser.add_argument('--flip-y', dest='flip_y', action='store_true',
        help='flip Y direction output')
    parser.add_argument('--brightness', dest='brightness', action='store', type=int,
        metavar='N', help='Global brightness value. Max of 31.')
    parser.add_argument('--save', dest='should_save_video', action='store_true',
        help='Save the video to avoid downloading it in the future.')
    parser.add_argument('--no-clear-screen', dest='dont_clear_screen', action='store_true',
        default=False, help="Don't clear the screen when initializing the video. For internal use only.")

    args = parser.parse_args()
    return args


args = parseArgs()
if args.log_uuid:
    Logger.set_uuid(args.log_uuid)
else:
    Logger.set_uuid(Logger.make_uuid())

settings = VideoSettings().from_config()
if args.color_mode is not None:
    settings.set_color_mode(args.color_mode)
if args.display_width is not None:
    settings.display_width = args.display_width
if args.display_height is not None:
    settings.display_height = args.display_height
if args.dont_play_audio is not None:
    settings.should_play_audio = not args.dont_play_audio
if args.brightness is not None:
    settings.brightness = args.brightness
if args.flip_x is not None:
    settings.flip_x = args.flip_x
if args.flip_y is not None:
    settings.flip_y = args.flip_y
if args.should_save_video is not None:
    settings.should_save_video = args.should_save_video

clear_screen = not args.dont_clear_screen
VideoProcessor(args.url, settings, VideoPlayer(settings, clear_screen), clear_screen).process_and_play()
