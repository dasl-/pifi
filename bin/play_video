#!/usr/bin/env python3

import argparse
import os
import sys

# This is necessary for the imports below to work
root_dir = os.path.abspath(os.path.dirname(__file__) + '/..')
sys.path.append(root_dir)

from pifi.config import Config
from pifi.logger import Logger
from pifi.video.videoprocessor import VideoProcessor
from pifi.video.videocolormode import VideoColorMode

def parseArgs():
    parser = argparse.ArgumentParser(
        description=("Play a video. Arguments that are not specified will get values from your " +
            "config file, if you have one."),
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument('--url', dest='url', action='store', default='https://www.youtube.com/watch?v=xmUZ6nCFNoU',
        help='youtube video url. default: The Smashing Pumpkins - Today.')
    parser.add_argument('--log-uuid', dest='log_uuid', action='store', help='Logger UUID')
    parser.add_argument('--color-mode', dest='color_mode', action='store',
        help=(f"one of: {VideoColorMode.COLOR_MODES}")
    )
    parser.add_argument('--no-audio', dest="dont_play_audio", action='store_true',
        default=None, help="play or don't play the audio")
    parser.add_argument('--brightness', dest='brightness', action='store', type=int,
        metavar='N', help='Global brightness value. Max of 31.')
    parser.add_argument('--save', dest='should_save_video', action='store_true',
        default=None, help='Save the video to avoid downloading it in the future.')
    parser.add_argument('--no-clear-screen', dest='dont_clear_screen', action='store_true',
        default=False, help="Don't clear the screen when initializing the video. For internal use only.")
    parser.add_argument('--use-extractors', dest='yt_dlp_extractors', action='store', default=None,
        help='Extractor names for yt-dlp to use, separated by commas. Whitelisting extractors to use can ' +
        'speed up video download initialization time. E.g. \'--use-extractors youtube\'. ' +
        'Refer to yt-dlp documentation for more details on the same named feature.')

    args = parser.parse_args()
    return args


args = parseArgs()
if args.log_uuid:
    Logger.set_uuid(args.log_uuid)
else:
    Logger.set_uuid(Logger.make_uuid())
Config.load_config_if_not_loaded()

if args.color_mode is not None:
    Config.set('video.color_mode', args.color_mode)
if args.dont_play_audio is not None:
    Config.set('video.should_play_audio', not args.dont_play_audio)
if args.brightness is not None:
    Config.set('leds.brightness', args.brightness)
if args.should_save_video is not None:
    Config.set('video.should_save_video', args.should_save_video)

clear_screen = not args.dont_clear_screen
VideoProcessor(args.url, clear_screen, args.yt_dlp_extractors).process_and_play()
